name: CI/CD to Azure Web App
on: # Definisce gli eventi che attivano il workflow
  push: # Il workflow si attiva quando viene eseguito un push
    branches:
      - main  # Il workflow si attiva quando viene eseguito un push su "main"

jobs:
  build:
    runs-on: ubuntu-latest  # Esegue il workflow su un runner Linux cioe una macchina virtuale che esegue i job

  environment:
    - PRODOTTI_JSON_PATH=/app/data/prodotti.json
    - DOTNET_ENVIRONMENT=Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Clona il repository GitHub

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin # --password-stdin permette di passare la password tramite stdin cioe da un input

      - name: Build and Push Docker Image
        run: | # Esegue i comandi shell | permette di scrivere più comandi su più righe
          docker build -t ${{ secrets.DOCKER_USERNAME }}/cd-ci-web -f dockerfile .
          docker tag ${{ secrets.DOCKER_USERNAME }}/cd-ci-web ${{ secrets.DOCKER_USERNAME }}/cd-ci-web:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/cd-ci-web:latest

  deploy:
    runs-on: ubuntu-latest # Esegue il workflow su un runner Linux cioe una macchina virtuale che esegue i job
    needs: build  # Il deploy inizia solo dopo che il job "build" è completato

    steps:
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2 # Usa l'azione di Azure per il deploy su Azure Web App
        with:
          app-name: 'cd-ci-web' # Nome dell'App Service
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} # il file XML con le credenziali
          images: ${{ secrets.DOCKER_USERNAME }}/cd-ci-web:latest # L'immagine Docker da deployare